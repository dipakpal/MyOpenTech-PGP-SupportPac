

CREATE COMPUTE MODULE PGPEncrypterMF_OverridePGPNodeProperties
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		
		--- Override PGP Encrypter node properties runtime
		-- SET OutputLocalEnvironment.PGP.Encryption.InputDirectory 		= 'C:\PGP\Data';
		-- SET OutputLocalEnvironment.PGP.Encryption.InputFileName 			= 'Encryption.input.txt';
		-- SET OutputLocalEnvironment.PGP.Encryption.OutputDirectory 		= 'C:\PGP\Data';
		-- SET OutputLocalEnvironment.PGP.Encryption.OutputFileName 		= 'Encryption.output.asc';
		
		-- SET OutputLocalEnvironment.PGP.Encryption.EncryptionKeyUserId 	= 'Recipient <recipient-pgp-keys@ibm.com>';
		SET OutputLocalEnvironment.PGP.Encryption.SignatureRequired 	= 'Yes';
		
		-- SET OutputLocalEnvironment.PGP.Encryption.SignKeyUserId 		= 'Sender <sender-pgp-keys@ibm.com>';
		SET OutputLocalEnvironment.PGP.Encryption.SignKeyPassphrase 	= 'passw0rd';
		
		--- Set SignKey(PGPPrivateKey) as BLOB data from File/Database into Local Environment -- optional
		SET OutputLocalEnvironment.PGP.Encryption.SignKey 		= Environment.Variables.PGP.SignKey;
		
		--- Set EncryptionKey(PGPPublicKey) as BLOB data from File/Database into Local Environment -- optional
		SET OutputLocalEnvironment.PGP.Encryption.EncryptionKey	= Environment.Variables.PGP.EncryptionKey;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
